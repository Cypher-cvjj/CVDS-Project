[main]
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm

#Configuration dataBase
dataSource = org.postgresql.ds.PGPoolingDataSource
dataSource.serverName = ec2-34-194-158-176.compute-1.amazonaws.com
dataSource.databaseName = d975rn81uu1t9t
dataSource.portNumber = 5432
dataSource.ssl = true
dataSource.sslfactory = org.postgresql.ssl.NonValidatingFactory
dataSource.user = xitgjpnsnwlaxj
dataSource.password = 445cc85e41ba8e9ffb37482671bc03f4e704d0c29ff5daf3aff8b7bb61e83d36
jdbcRealm.dataSource = $dataSource

jdbcRealm.authenticationQuery = SELECT contrasena FROM usuarios WHERE correo = ?
jdbcRealm.userRolesQuery = SELECT tipousuario FROM usuarios WHERE correo = ?

# Let's use some in-memory caching to reduce the number of runtime lookups against a remote user store.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

authc=org.apache.shiro.web.filter.authc.FormAuthenticationFilter
authc.loginUrl = /login.xhtml

#passwordMatcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.hashIterations=1
credentialsMatcher.storedCredentialsHexEncoded = true

onlynot=edu.eci.cvds.seguridad.noautenticado
onlynot.urlini= /recursos.html


[urls]

/login.xhtml = anon
/logout = logout
/=onlynot
/login.xhtml=onlynot